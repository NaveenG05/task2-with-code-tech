mysql> use intern;
Database changed
mysql> CREATE TABLE Sales (
    ->     SaleID INT,
    ->     CustomerID INT,
    ->     Product VARCHAR(50),
    ->     Amount DECIMAL(10,2),
    ->     SaleDate DATE
    -> );
Query OK, 0 rows affected (0.14 sec)
mysql> -- Insert sample data
mysql> INSERT INTO Sales (SaleID, CustomerID, Product, Amount, SaleDate) VALUES
    -> (1, 101, 'Laptop', 85000, '2024-01-15'),
    -> (2, 102, 'Phone', 40000, '2024-01-17'),
    -> (3, 101, 'Tablet', 25000, '2024-02-01'),
    -> (4, 103, 'Laptop', 90000, '2024-02-10'),
    -> (5, 102, 'Phone', 45000, '2024-02-22'),
    -> (6, 104, 'Camera', 30000, '2024-03-01'),
    -> (7, 105, 'Headphones', 5000, '2024-03-04'),
    -> (8, 103, 'Laptop', 95000, '2024-03-10'),
    -> (9, 101, 'Phone', 42000, '2024-04-01'),
    -> (10, 104, 'Camera', 32000, '2024-04-15');
Query OK, 10 rows affected (0.02 sec)
Records: 10  Duplicates: 0  Warnings: 0
mysql> -- Show all sales greater than the average sale amount
mysql> SELECT *
    -> FROM Sales
    -> WHERE Amount > (SELECT AVG(Amount) FROM Sales);
+--------+------------+---------+----------+------------+
| SaleID | CustomerID | Product | Amount   | SaleDate   |
+--------+------------+---------+----------+------------+
|      1 |        101 | Laptop  | 85000.00 | 2024-01-15 |
|      4 |        103 | Laptop  | 90000.00 | 2024-02-10 |
|      8 |        103 | Laptop  | 95000.00 | 2024-03-10 |
+--------+------------+---------+----------+------------+
3 rows in set (0.00 sec)
mysql> -- Calculate monthly sales using CTE
mysql> WITH MonthlySales AS (
    ->     SELECT
    ->         DATE_FORMAT(SaleDate, '%Y-%m') AS Month,
    ->         SUM(Amount) AS TotalSales
    ->     FROM Sales
    ->     GROUP BY Month
    -> )
    -> SELECT * FROM MonthlySales;
+---------+------------+
| Month   | TotalSales |
+---------+------------+
| 2024-01 |  125000.00 |
| 2024-02 |  160000.00 |
| 2024-03 |  130000.00 |
| 2024-04 |   74000.00 |
+---------+------------+
4 rows in set (0.03 sec)
mysql> -- Rank sales for each customer by amount
mysql> SELECT
    ->     CustomerID,
    ->     Product,
    ->     Amount,
    ->     RANK() OVER (PARTITION BY CustomerID ORDER BY Amount DESC) AS SaleRank
    -> FROM Sales;
+------------+------------+----------+----------+
| CustomerID | Product    | Amount   | SaleRank |
+------------+------------+----------+----------+
|        101 | Laptop     | 85000.00 |        1 |
|        101 | Phone      | 42000.00 |        2 |
|        101 | Tablet     | 25000.00 |        3 |
|        102 | Phone      | 45000.00 |        1 |
|        102 | Phone      | 40000.00 |        2 |
|        103 | Laptop     | 95000.00 |        1 |
|        103 | Laptop     | 90000.00 |        2 |
|        104 | Camera     | 32000.00 |        1 |
|        104 | Camera     | 30000.00 |        2 |
|        105 | Headphones |  5000.00 |        1 |
+------------+------------+----------+----------+
10 rows in set (0.02 sec)
mysql> -- Cumulative monthly sales using window function
mysql> WITH MonthlySales AS (
    ->     SELECT
    ->         DATE_FORMAT(SaleDate, '%Y-%m') AS Month,
    ->         SUM(Amount) AS TotalSales
    ->     FROM Sales
    ->     GROUP BY Month
    -> )
    -> SELECT
    ->     Month,
    ->     TotalSales,
    ->     SUM(TotalSales) OVER (ORDER BY Month) AS CumulativeSales
    -> FROM MonthlySales;
+---------+------------+-----------------+
| Month   | TotalSales | CumulativeSales |
+---------+------------+-----------------+
| 2024-01 |  125000.00 |       125000.00 |
| 2024-02 |  160000.00 |       285000.00 |
| 2024-03 |  130000.00 |       415000.00 |
| 2024-04 |   74000.00 |       489000.00 |
+---------+------------+-----------------+
4 rows in set (0.00 sec)
